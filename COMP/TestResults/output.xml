<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20161216 20:11:46.215" generator="Robot 3.0 (Python 2.7.12 on win32)">
<suite source="C:\Users\gfung\.jenkins\workspace\COMP-Smoketest-Admin-Side\COMP" id="s1" name="COMP">
<suite source="C:\Users\gfung\.jenkins\workspace\COMP-Smoketest-Admin-Side\COMP\TestSuites" id="s1-s1" name="TestSuites">
<suite source="C:\Users\gfung\.jenkins\workspace\COMP-Smoketest-Admin-Side\COMP\TestSuites\SMP-API-Talent_Pool.robot" id="s1-s1-s1" name="SMP-API-Talent Pool">
<test id="s1-s1-s1-t1" name="PUT-API_TalentPool_Rename_Access_Not_Active">
<kw name="REST_NOAUTH_Random_Active_Owner_OR_Shared" library="SMP_Keywords">
<doc>*REST_NOAUTH:*</doc>
<kw name="Connect" library="SQLlibrary">
<arguments>
<arg>${RNOAUTH_CUSTOM_SERVER}</arg>
<arg>${SQL_DB}</arg>
</arguments>
<status status="PASS" endtime="20161216 20:11:46.918" starttime="20161216 20:11:46.872"></status>
</kw>
<kw name="Execute Raw" library="SQLlibrary">
<arguments>
<arg>SELECT TOP 1 user_id FROM users WHERE culture_lang_id IS NOT NULL AND status_id = 1 AND (user_id IN (SELECT DISTINCT owner_id FROM ou WHERE type_id = 131072) OR user_id IN (SELECT DISTINCT user_id FROM talent_pool_shared_user)) ORDER BY NEWID()</arg>
</arguments>
<assign>
<var>${SQL_GET_USERID}</var>
</assign>
<msg timestamp="20161216 20:11:46.955" level="INFO">${SQL_GET_USERID} = 415</msg>
<status status="PASS" endtime="20161216 20:11:46.955" starttime="20161216 20:11:46.919"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${SQL_GET_USERID}</arg>
</arguments>
<msg timestamp="20161216 20:11:46.957" level="INFO">415</msg>
<status status="PASS" endtime="20161216 20:11:46.957" starttime="20161216 20:11:46.956"></status>
</kw>
<kw name="Execute Raw" library="SQLlibrary">
<arguments>
<arg>SELECT culture_lang_id FROM users WHERE user_id = ${SQL_GET_USERID}</arg>
</arguments>
<assign>
<var>${SQL_GET_USER_CULTURE}</var>
</assign>
<msg timestamp="20161216 20:11:46.960" level="INFO">${SQL_GET_USER_CULTURE} = 1</msg>
<status status="PASS" endtime="20161216 20:11:46.960" starttime="20161216 20:11:46.958"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SQL_GET_USERID}</arg>
<arg>${SQL_GET_USERID}</arg>
</arguments>
<msg timestamp="20161216 20:11:46.962" level="INFO">${SQL_GET_USERID} = 415</msg>
<status status="PASS" endtime="20161216 20:11:46.962" starttime="20161216 20:11:46.961"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SQL_GET_USER_CULTURE}</arg>
<arg>${SQL_GET_USER_CULTURE}</arg>
</arguments>
<msg timestamp="20161216 20:11:46.963" level="INFO">${SQL_GET_USER_CULTURE} = 1</msg>
<status status="PASS" endtime="20161216 20:11:46.964" starttime="20161216 20:11:46.963"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${SQL_GET_USER_CULTURE}</arg>
</arguments>
<msg timestamp="20161216 20:11:46.965" level="INFO">1</msg>
<status status="PASS" endtime="20161216 20:11:46.965" starttime="20161216 20:11:46.964"></status>
</kw>
<kw name="Create Http Context" library="HttpLibrary.HTTP">
<doc>Sets the HTTP host to use for future requests. You must call this</doc>
<arguments>
<arg>${HTTP_CONTEXT}</arg>
<arg>http</arg>
</arguments>
<msg timestamp="20161216 20:11:46.966" level="INFO">Host for next HTTP request set to 'laxqapexmt.office.cyberu.com'</msg>
<msg timestamp="20161216 20:11:46.967" level="INFO">Scheme for next HTTP request set to 'http'</msg>
<status status="PASS" endtime="20161216 20:11:46.967" starttime="20161216 20:11:46.966"></status>
</kw>
<kw name="Set Request Header" library="HttpLibrary.HTTP">
<doc>Sets a request header for the next request.</doc>
<arguments>
<arg>X-CORP</arg>
<arg>${RNOAUTH_CUSTOM_CORP}</arg>
</arguments>
<msg timestamp="20161216 20:11:46.968" level="INFO">Set request header "X-CORP" to "qa01-auto-smp-api"</msg>
<status status="PASS" endtime="20161216 20:11:46.968" starttime="20161216 20:11:46.967"></status>
</kw>
<kw name="Set Request Header" library="HttpLibrary.HTTP">
<doc>Sets a request header for the next request.</doc>
<arguments>
<arg>X-USERID</arg>
<arg>${SQL_GET_USERID}</arg>
</arguments>
<msg timestamp="20161216 20:11:46.969" level="INFO">Set request header "X-USERID" to "415"</msg>
<status status="PASS" endtime="20161216 20:11:46.970" starttime="20161216 20:11:46.969"></status>
</kw>
<kw name="Set Request Header" library="HttpLibrary.HTTP">
<doc>Sets a request header for the next request.</doc>
<arguments>
<arg>X-CULTUREID</arg>
<arg>${SQL_GET_USER_CULTURE}</arg>
</arguments>
<msg timestamp="20161216 20:11:46.971" level="INFO">Set request header "X-CULTUREID" to "1"</msg>
<status status="PASS" endtime="20161216 20:11:46.972" starttime="20161216 20:11:46.970"></status>
</kw>
<status status="PASS" endtime="20161216 20:11:46.972" starttime="20161216 20:11:46.871"></status>
</kw>
<kw name="REST_AuthToken" library="SMP_Keywords">
<doc>*REST_AuthToken:*</doc>
<kw name="Set Request Header" library="HttpLibrary.HTTP">
<doc>Sets a request header for the next request.</doc>
<arguments>
<arg>content-type</arg>
<arg>\ application/json</arg>
</arguments>
<msg timestamp="20161216 20:11:46.975" level="INFO">Set request header "content-type" to " application/json"</msg>
<status status="PASS" endtime="20161216 20:11:46.976" starttime="20161216 20:11:46.975"></status>
</kw>
<kw name="Set Request Body" library="HttpLibrary.HTTP">
<doc>Set the request body for the next HTTP request.</doc>
<arguments>
<arg>{ \ \ \"UserId\": ${SQL_GET_USERID}, \ \ \"CorpName\": \"${RNOAUTH_CUSTOM_CORP}\", \ \ \"Permissions\": [ \ \ \ \ { \ \ \ \ \ \ \"Id\": -157, \ \ \ \ \ \ \"Constraints\": [ \ \ \ \ \ \ \ \ { \ \ \ \ \ \ \ \ \ \ \"m_Item1\": 73, \ \ \ \ \ \ \ \ \ \ \"m_Item2\": 2, \ \ \ \ \ \ \ \ \ \ \"m_Item3\": true \ \ \ \ \ \ \ \ }, \ \ \ \ \ \ \ \ { \ \ \ \ \ \ \ \ \ \ \"m_Item1\": 87, \ \ \ \ \ \ \ \ \ \ \"m_Item2\": 32, \ \ \ \ \ \ \ \ \ \ \"m_Item3\": false \ \ \ \ \ \ \ \ }, \ \ \ \ \ \ \ \ { \ \ \ \ \ \ \ \ \ \ \"m_Item1\": 111, \ \ \ \ \ \ \ \ \ \ \"m_Item2\": 4, \ \ \ \ \ \ \ \ \ \ \"m_Item3\": false \ \ \ \ \ \ \ \ }, \ \ \ \ \ \ \ \ { \ \ \ \ \ \ \ \ \ \ \"m_Item1\": 150, \ \ \ \ \ \ \ \ \ \ \"m_Item2\": 8, \ \ \ \ \ \ \ \ \ \ \"m_Item3\": false \ \ \ \ \ \ \ \ } \ \ \ \ \ \ ] \ \ \ \ } \ \ ], \ \ \"Token\": \"${RNOAUTH_CUSTOM_CORP}_${SQL_GET_USERID}\", \ \ \"expDt\": \"2019-08-17T16:16:19.550Z\", \ \ \"CultureId\": 0 }</arg>
</arguments>
<msg timestamp="20161216 20:11:46.981" level="INFO">Request body set to "{   "UserId": 415,   "CorpName": "qa01-auto-smp-api",   "Permissions": [     {       "Id": -157,       "Constraints": [         {           "m_Item1": 73,           "m_Item2": 2,           "m_Item3": true         },         {           "m_Item1": 87,           "m_Item2": 32,           "m_Item3": false         },         {           "m_Item1": 111,           "m_Item2": 4,           "m_Item3": false         },         {           "m_Item1": 150,           "m_Item2": 8,           "m_Item3": false         }       ]     }   ],   "Token": "qa01-auto-smp-api_415",   "expDt": "2019-08-17T16:16:19.550Z",   "CultureId": 0 }".</msg>
<status status="PASS" endtime="20161216 20:11:46.981" starttime="20161216 20:11:46.976"></status>
</kw>
<kw name="PUT" library="HttpLibrary.HTTP">
<doc>Issues a HTTP PUT request.</doc>
<arguments>
<arg>/cornerstone-auth-api/v1</arg>
</arguments>
<status status="PASS" endtime="20161216 20:11:47.000" starttime="20161216 20:11:46.981"></status>
</kw>
<kw name="Response Status Code Should Equal" library="HttpLibrary.HTTP">
<doc>Fails if the response status code of the previous request was not the</doc>
<arguments>
<arg>204</arg>
</arguments>
<status status="PASS" endtime="20161216 20:11:47.001" starttime="20161216 20:11:47.001"></status>
</kw>
<kw name="Get Response Body" library="HttpLibrary.HTTP">
<doc>Get the response body.</doc>
<assign>
<var>${resBody}</var>
</assign>
<msg timestamp="20161216 20:11:47.003" level="INFO">${resBody} = </msg>
<status status="PASS" endtime="20161216 20:11:47.003" starttime="20161216 20:11:47.003"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Close</arg>
</arguments>
<status status="PASS" endtime="20161216 20:11:47.004" starttime="20161216 20:11:47.004"></status>
</kw>
<status status="PASS" endtime="20161216 20:11:47.005" starttime="20161216 20:11:46.974"></status>
</kw>
<kw name="PUT_TalentPool_Candidate_Status_Set" library="SMP_Keywords">
<doc>*POST_TalentPool_Create:*</doc>
<arguments>
<arg>Title</arg>
<arg>200</arg>
</arguments>
<kw name="Execute Raw" library="SQLlibrary">
<arguments>
<arg>SELECT TOP 1 ou_id FROM ou WHERE (owner_id = ${SQL_GET_USERID} OR ou_id IN (SELECT ou_id FROM talent_pool_shared_user WHERE user_id = ${SQL_GET_USERID})) AND ou_id IN (SELECT ou_id FROM ou_user GROUP BY ou_id HAVING COUNT(ou_id) &gt;= 1) AND ou.type_id = 131072 ORDER BY NEWID()</arg>
</arguments>
<assign>
<var>${SQL_TalentPoolId}</var>
</assign>
<msg timestamp="20161216 20:11:47.048" level="INFO">${SQL_TalentPoolId} = 788</msg>
<status status="PASS" endtime="20161216 20:11:47.048" starttime="20161216 20:11:47.012"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SQL_TalentPoolId}</arg>
<arg>${SQL_TalentPoolId}</arg>
</arguments>
<msg timestamp="20161216 20:11:47.050" level="INFO">${SQL_TalentPoolId} = 788</msg>
<status status="PASS" endtime="20161216 20:11:47.051" starttime="20161216 20:11:47.049"></status>
</kw>
<kw name="Execute Raw" library="SQLlibrary">
<arguments>
<arg>SELECT TOP 1 user_id FROM ou_user WHERE ou_id = ${SQL_TalentPoolId} ORDER BY NEWID()</arg>
</arguments>
<assign>
<var>${SQL_GetCandidateId1}</var>
</assign>
<msg timestamp="20161216 20:11:47.056" level="INFO">${SQL_GetCandidateId1} = 777</msg>
<status status="PASS" endtime="20161216 20:11:47.056" starttime="20161216 20:11:47.051"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SQL_GetCandidateId1}</arg>
<arg>${SQL_GetCandidateId1}</arg>
</arguments>
<msg timestamp="20161216 20:11:47.057" level="INFO">${SQL_GetCandidateId1} = 777</msg>
<status status="PASS" endtime="20161216 20:11:47.059" starttime="20161216 20:11:47.056"></status>
</kw>
<kw name="Execute Raw" library="SQLlibrary">
<arguments>
<arg>SELECT TOP 1 status_id FROM ou_user_status WHERE culture_id = 1 AND status_id IN (128,256,512,1024) ORDER BY NEWID()</arg>
</arguments>
<assign>
<var>${SQL_GetCandidateId1Status}</var>
</assign>
<msg timestamp="20161216 20:11:47.063" level="INFO">${SQL_GetCandidateId1Status} = 1024</msg>
<status status="PASS" endtime="20161216 20:11:47.063" starttime="20161216 20:11:47.059"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SQL_GetCandidateId1Status}</arg>
<arg>${SQL_GetCandidateId1Status}</arg>
</arguments>
<msg timestamp="20161216 20:11:47.065" level="INFO">${SQL_GetCandidateId1Status} = 1024</msg>
<status status="PASS" endtime="20161216 20:11:47.065" starttime="20161216 20:11:47.064"></status>
</kw>
<kw name="Create Http Context" library="HttpLibrary.HTTP">
<doc>Sets the HTTP host to use for future requests. You must call this</doc>
<arguments>
<arg>${HTTP_CONTEXT}</arg>
<arg>http</arg>
</arguments>
<msg timestamp="20161216 20:11:47.066" level="INFO">Host for next HTTP request set to 'laxqapexmt.office.cyberu.com'</msg>
<msg timestamp="20161216 20:11:47.067" level="INFO">Scheme for next HTTP request set to 'http'</msg>
<status status="PASS" endtime="20161216 20:11:47.067" starttime="20161216 20:11:47.066"></status>
</kw>
<kw name="Set Request Header" library="HttpLibrary.HTTP">
<doc>Sets a request header for the next request.</doc>
<arguments>
<arg>X-CORP</arg>
<arg>${RNOAUTH_CUSTOM_CORP}</arg>
</arguments>
<msg timestamp="20161216 20:11:47.068" level="INFO">Set request header "X-CORP" to "qa01-auto-smp-api"</msg>
<status status="PASS" endtime="20161216 20:11:47.069" starttime="20161216 20:11:47.067"></status>
</kw>
<kw name="Set Request Header" library="HttpLibrary.HTTP">
<doc>Sets a request header for the next request.</doc>
<arguments>
<arg>X-USERID</arg>
<arg>${SQL_GET_USERID}</arg>
</arguments>
<msg timestamp="20161216 20:11:47.070" level="INFO">Set request header "X-USERID" to "415"</msg>
<status status="PASS" endtime="20161216 20:11:47.071" starttime="20161216 20:11:47.069"></status>
</kw>
<kw name="Set Request Header" library="HttpLibrary.HTTP">
<doc>Sets a request header for the next request.</doc>
<arguments>
<arg>X-CULTUREID</arg>
<arg>${SQL_GET_USER_CULTURE}</arg>
</arguments>
<msg timestamp="20161216 20:11:47.072" level="INFO">Set request header "X-CULTUREID" to "1"</msg>
<status status="PASS" endtime="20161216 20:11:47.073" starttime="20161216 20:11:47.071"></status>
</kw>
<kw name="Set Request Header" library="HttpLibrary.HTTP">
<doc>Sets a request header for the next request.</doc>
<arguments>
<arg>content-type</arg>
<arg>\ application/json</arg>
</arguments>
<msg timestamp="20161216 20:11:47.075" level="INFO">Set request header "content-type" to " application/json"</msg>
<status status="PASS" endtime="20161216 20:11:47.076" starttime="20161216 20:11:47.074"></status>
</kw>
<kw name="Set Request Body" library="HttpLibrary.HTTP">
<doc>Set the request body for the next HTTP request.</doc>
<arguments>
<arg>[{"UserId": ${SQL_GetCandidateId1},"Status": ${SQL_GetCandidateId1Status}}]</arg>
</arguments>
<msg timestamp="20161216 20:11:47.078" level="INFO">Request body set to "[{"UserId": 777,"Status": 1024}]".</msg>
<status status="PASS" endtime="20161216 20:11:47.079" starttime="20161216 20:11:47.077"></status>
</kw>
<kw name="PUT" library="HttpLibrary.HTTP">
<doc>Issues a HTTP PUT request.</doc>
<arguments>
<arg>/talentpool-api/talentpools/${SQL_TalentPoolId}/candidates/status</arg>
</arguments>
<status status="PASS" endtime="20161216 20:11:47.380" starttime="20161216 20:11:47.079"></status>
</kw>
<kw name="Get Response Body" library="HttpLibrary.HTTP">
<doc>Get the response body.</doc>
<assign>
<var>${resBody}</var>
</assign>
<msg timestamp="20161216 20:11:47.382" level="INFO">${resBody} = [{"UserId":777,"FirstName":"Murray","LastName":"Miguel","Ref":"Mmiguel","TypeId":0,"UserStatusId":0,"CandidateStatusId":1024,"CandidateStatus":null,"Position":null,"Division":null,"ManagerName":null,"...</msg>
<status status="PASS" endtime="20161216 20:11:47.382" starttime="20161216 20:11:47.381"></status>
</kw>
<kw name="Execute Raw" library="SQLlibrary">
<arguments>
<arg>SELECT status_id FROM ou_user WHERE ou_id = ${SQL_TalentPoolId} AND user_id = ${SQL_GetCandidateId1} ORDER BY NEWID()</arg>
</arguments>
<assign>
<var>${SQL_GetCandidate1Status_After}</var>
</assign>
<msg timestamp="20161216 20:11:47.387" level="INFO">${SQL_GetCandidate1Status_After} = 1024</msg>
<status status="PASS" endtime="20161216 20:11:47.388" starttime="20161216 20:11:47.383"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SQL_GetCandidate1Status_After}</arg>
<arg>${SQL_GetCandidate1Status_After}</arg>
</arguments>
<msg timestamp="20161216 20:11:47.389" level="INFO">${SQL_GetCandidate1Status_After} = 1024</msg>
<status status="PASS" endtime="20161216 20:11:47.390" starttime="20161216 20:11:47.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SQL_GetCandidate1Status_After}'== '${SQL_GetCandidateId1Status}'</arg>
<arg>Utility Set Test Message</arg>
<arg>The ${SQL_GetCandidate1Status_After} matches with ${SQL_GetCandidateId1Status}</arg>
</arguments>
<kw name="Utility Set Test Message" library="UtilityKeywords">
<arguments>
<arg>The ${SQL_GetCandidate1Status_After} matches with ${SQL_GetCandidateId1Status}</arg>
</arguments>
<kw name="Set Test Message" library="BuiltIn">
<doc>Sets message for the current test case.</doc>
<arguments>
<arg>${testMsg}</arg>
<arg>${append}</arg>
</arguments>
<msg timestamp="20161216 20:11:47.396" level="INFO">Set test message to:
The 1024 matches with 1024</msg>
<status status="PASS" endtime="20161216 20:11:47.397" starttime="20161216 20:11:47.396"></status>
</kw>
<status status="PASS" endtime="20161216 20:11:47.397" starttime="20161216 20:11:47.394"></status>
</kw>
<status status="PASS" endtime="20161216 20:11:47.397" starttime="20161216 20:11:47.390"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SQL_GetCandidate1Status_After}'&lt;&gt; '${SQL_GetCandidateId1Status}'</arg>
<arg>Fail</arg>
<arg>The ${SQL_GetCandidate1Status_After} did not match ${SQL_GetCandidateId1Status}</arg>
</arguments>
<status status="PASS" endtime="20161216 20:11:47.401" starttime="20161216 20:11:47.398"></status>
</kw>
<kw name="Close" library="SQLlibrary">
<status status="PASS" endtime="20161216 20:11:47.403" starttime="20161216 20:11:47.401"></status>
</kw>
<status status="PASS" endtime="20161216 20:11:47.404" starttime="20161216 20:11:47.011"></status>
</kw>
<doc>*Name:*
PUT-API_TP_Rename_Access_NotActive

*Description:*
Access: Verify failure when actor not active

*Run Arguments:*
-d TestResults -v RNOAUTH_HOST:QA01


*NOTE:* The Run Arguments will select what set of data to run durning run time by providing QA01 or QA052 or QA03 as the environment after the scaler RNOAUTH_HOST:
-d TestResults will put the output report.html and log.html in a folder named TestResults.</doc>
<tags>
<tag>PUT</tag>
</tags>
<status status="PASS" endtime="20161216 20:11:47.404" critical="yes" starttime="20161216 20:11:46.862">The 1024 matches with 1024</status>
</test>
<status status="PASS" endtime="20161216 20:11:47.405" starttime="20161216 20:11:46.281"></status>
</suite>
<status status="PASS" endtime="20161216 20:11:47.410" starttime="20161216 20:11:46.278"></status>
</suite>
<status status="PASS" endtime="20161216 20:11:47.412" starttime="20161216 20:11:46.235"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="1">Critical Tests</stat>
<stat fail="0" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">PUT</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="COMP" pass="1">COMP</stat>
<stat fail="0" id="s1-s1" name="TestSuites" pass="1">COMP.TestSuites</stat>
<stat fail="0" id="s1-s1-s1" name="SMP-API-Talent Pool" pass="1">COMP.TestSuites.SMP-API-Talent Pool</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
