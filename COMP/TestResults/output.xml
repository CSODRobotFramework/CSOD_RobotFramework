<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170125 23:22:20.925" generator="Robot 3.0 (Python 2.7.12 on win32)">
<suite source="C:\Users\gfung\.jenkins\workspace\COMP-Smoketest-Admin-Side\COMP" id="s1" name="COMP">
<suite source="C:\Users\gfung\.jenkins\workspace\COMP-Smoketest-Admin-Side\COMP\TestSuites" id="s1-s1" name="TestSuites">
<suite source="C:\Users\gfung\.jenkins\workspace\COMP-Smoketest-Admin-Side\COMP\TestSuites\SMP-API-Talent_Pool.robot" id="s1-s1-s1" name="SMP-API-Talent Pool">
<test id="s1-s1-s1-t1" name="POST-API_TP_Grp_Create_UseCase_Elab_AlreadyExists">
<kw name="REST_NOAUTH_Random_Active_Owner_OR_Shared" library="SMP_Keywords">
<doc>*REST_NOAUTH:*</doc>
<kw name="Connect" library="SQLlibrary">
<arguments>
<arg>${RNOAUTH_CUSTOM_SERVER}</arg>
<arg>${SQL_DB}</arg>
</arguments>
<status status="PASS" endtime="20170125 23:22:23.708" starttime="20170125 23:22:23.412"></status>
</kw>
<kw name="Execute Raw" library="SQLlibrary">
<arguments>
<arg>SELECT TOP 1 user_id FROM users WHERE culture_lang_id IS NOT NULL AND status_id = 1 AND (user_id IN (SELECT DISTINCT owner_id FROM ou WHERE type_id = 131072) OR user_id IN (SELECT DISTINCT user_id FROM talent_pool_shared_user)) ORDER BY NEWID()</arg>
</arguments>
<assign>
<var>${SQL_GET_USERID}</var>
</assign>
<msg timestamp="20170125 23:22:23.799" level="INFO">${SQL_GET_USERID} = 43</msg>
<status status="PASS" endtime="20170125 23:22:23.799" starttime="20170125 23:22:23.709"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${SQL_GET_USERID}</arg>
</arguments>
<msg timestamp="20170125 23:22:23.801" level="INFO">43</msg>
<status status="PASS" endtime="20170125 23:22:23.801" starttime="20170125 23:22:23.800"></status>
</kw>
<kw name="Execute Raw" library="SQLlibrary">
<arguments>
<arg>SELECT culture_lang_id FROM users WHERE user_id = ${SQL_GET_USERID}</arg>
</arguments>
<assign>
<var>${SQL_GET_USER_CULTURE}</var>
</assign>
<msg timestamp="20170125 23:22:23.804" level="INFO">${SQL_GET_USER_CULTURE} = 1</msg>
<status status="PASS" endtime="20170125 23:22:23.804" starttime="20170125 23:22:23.801"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SQL_GET_USERID}</arg>
<arg>${SQL_GET_USERID}</arg>
</arguments>
<msg timestamp="20170125 23:22:23.805" level="INFO">${SQL_GET_USERID} = 43</msg>
<status status="PASS" endtime="20170125 23:22:23.806" starttime="20170125 23:22:23.805"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SQL_GET_USER_CULTURE}</arg>
<arg>${SQL_GET_USER_CULTURE}</arg>
</arguments>
<msg timestamp="20170125 23:22:23.807" level="INFO">${SQL_GET_USER_CULTURE} = 1</msg>
<status status="PASS" endtime="20170125 23:22:23.808" starttime="20170125 23:22:23.806"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${SQL_GET_USER_CULTURE}</arg>
</arguments>
<msg timestamp="20170125 23:22:23.809" level="INFO">1</msg>
<status status="PASS" endtime="20170125 23:22:23.809" starttime="20170125 23:22:23.808"></status>
</kw>
<kw name="Create Http Context" library="HttpLibrary.HTTP">
<doc>Sets the HTTP host to use for future requests. You must call this</doc>
<arguments>
<arg>${HTTP_CONTEXT}</arg>
<arg>http</arg>
</arguments>
<msg timestamp="20170125 23:22:23.810" level="INFO">Host for next HTTP request set to 'laxqapexmt.office.cyberu.com'</msg>
<msg timestamp="20170125 23:22:23.810" level="INFO">Scheme for next HTTP request set to 'http'</msg>
<status status="PASS" endtime="20170125 23:22:23.810" starttime="20170125 23:22:23.810"></status>
</kw>
<kw name="Set Request Header" library="HttpLibrary.HTTP">
<doc>Sets a request header for the next request.</doc>
<arguments>
<arg>X-CORP</arg>
<arg>${RNOAUTH_CUSTOM_CORP}</arg>
</arguments>
<msg timestamp="20170125 23:22:23.812" level="INFO">Set request header "X-CORP" to "qa01-auto-smp-api"</msg>
<status status="PASS" endtime="20170125 23:22:23.812" starttime="20170125 23:22:23.812"></status>
</kw>
<kw name="Set Request Header" library="HttpLibrary.HTTP">
<doc>Sets a request header for the next request.</doc>
<arguments>
<arg>X-USERID</arg>
<arg>${SQL_GET_USERID}</arg>
</arguments>
<msg timestamp="20170125 23:22:23.813" level="INFO">Set request header "X-USERID" to "43"</msg>
<status status="PASS" endtime="20170125 23:22:23.813" starttime="20170125 23:22:23.813"></status>
</kw>
<kw name="Set Request Header" library="HttpLibrary.HTTP">
<doc>Sets a request header for the next request.</doc>
<arguments>
<arg>X-CULTUREID</arg>
<arg>${SQL_GET_USER_CULTURE}</arg>
</arguments>
<msg timestamp="20170125 23:22:23.815" level="INFO">Set request header "X-CULTUREID" to "1"</msg>
<status status="PASS" endtime="20170125 23:22:23.815" starttime="20170125 23:22:23.814"></status>
</kw>
<status status="PASS" endtime="20170125 23:22:23.815" starttime="20170125 23:22:23.411"></status>
</kw>
<kw name="REST_AuthToken" library="SMP_Keywords">
<doc>*REST_AuthToken:*</doc>
<kw name="Set Request Header" library="HttpLibrary.HTTP">
<doc>Sets a request header for the next request.</doc>
<arguments>
<arg>content-type</arg>
<arg>\ application/json</arg>
</arguments>
<msg timestamp="20170125 23:22:23.818" level="INFO">Set request header "content-type" to " application/json"</msg>
<status status="PASS" endtime="20170125 23:22:23.819" starttime="20170125 23:22:23.817"></status>
</kw>
<kw name="Set Request Body" library="HttpLibrary.HTTP">
<doc>Set the request body for the next HTTP request.</doc>
<arguments>
<arg>{ \ \ \"UserId\": ${SQL_GET_USERID}, \ \ \"CorpName\": \"${RNOAUTH_CUSTOM_CORP}\", \ \ \"Permissions\": [ \ \ \ \ { \ \ \ \ \ \ \"Id\": -157, \ \ \ \ \ \ \"Constraints\": [ \ \ \ \ \ \ \ \ { \ \ \ \ \ \ \ \ \ \ \"m_Item1\": 73, \ \ \ \ \ \ \ \ \ \ \"m_Item2\": 2, \ \ \ \ \ \ \ \ \ \ \"m_Item3\": true \ \ \ \ \ \ \ \ }, \ \ \ \ \ \ \ \ { \ \ \ \ \ \ \ \ \ \ \"m_Item1\": 87, \ \ \ \ \ \ \ \ \ \ \"m_Item2\": 32, \ \ \ \ \ \ \ \ \ \ \"m_Item3\": false \ \ \ \ \ \ \ \ }, \ \ \ \ \ \ \ \ { \ \ \ \ \ \ \ \ \ \ \"m_Item1\": 111, \ \ \ \ \ \ \ \ \ \ \"m_Item2\": 4, \ \ \ \ \ \ \ \ \ \ \"m_Item3\": false \ \ \ \ \ \ \ \ }, \ \ \ \ \ \ \ \ { \ \ \ \ \ \ \ \ \ \ \"m_Item1\": 150, \ \ \ \ \ \ \ \ \ \ \"m_Item2\": 8, \ \ \ \ \ \ \ \ \ \ \"m_Item3\": false \ \ \ \ \ \ \ \ } \ \ \ \ \ \ ] \ \ \ \ } \ \ ], \ \ \"Token\": \"${RNOAUTH_CUSTOM_CORP}_${SQL_GET_USERID}\", \ \ \"expDt\": \"2019-08-17T16:16:19.550Z\", \ \ \"CultureId\": 0 }</arg>
</arguments>
<msg timestamp="20170125 23:22:23.824" level="INFO">Request body set to "{   "UserId": 43,   "CorpName": "qa01-auto-smp-api",   "Permissions": [     {       "Id": -157,       "Constraints": [         {           "m_Item1": 73,           "m_Item2": 2,           "m_Item3": true         },         {           "m_Item1": 87,           "m_Item2": 32,           "m_Item3": false         },         {           "m_Item1": 111,           "m_Item2": 4,           "m_Item3": false         },         {           "m_Item1": 150,           "m_Item2": 8,           "m_Item3": false         }       ]     }   ],   "Token": "qa01-auto-smp-api_43",   "expDt": "2019-08-17T16:16:19.550Z",   "CultureId": 0 }".</msg>
<status status="PASS" endtime="20170125 23:22:23.825" starttime="20170125 23:22:23.819"></status>
</kw>
<kw name="PUT" library="HttpLibrary.HTTP">
<doc>Issues a HTTP PUT request.</doc>
<arguments>
<arg>/cornerstone-auth-api/v1</arg>
</arguments>
<status status="PASS" endtime="20170125 23:22:23.862" starttime="20170125 23:22:23.825"></status>
</kw>
<kw name="Response Status Code Should Equal" library="HttpLibrary.HTTP">
<doc>Fails if the response status code of the previous request was not the</doc>
<arguments>
<arg>204</arg>
</arguments>
<status status="PASS" endtime="20170125 23:22:23.864" starttime="20170125 23:22:23.863"></status>
</kw>
<kw name="Get Response Body" library="HttpLibrary.HTTP">
<doc>Get the response body.</doc>
<assign>
<var>${resBody}</var>
</assign>
<msg timestamp="20170125 23:22:23.865" level="INFO">${resBody} = </msg>
<status status="PASS" endtime="20170125 23:22:23.865" starttime="20170125 23:22:23.864"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Close</arg>
</arguments>
<status status="PASS" endtime="20170125 23:22:23.866" starttime="20170125 23:22:23.866"></status>
</kw>
<status status="PASS" endtime="20170125 23:22:23.867" starttime="20170125 23:22:23.816"></status>
</kw>
<kw name="POST_TalentPool_Group_Create" library="SMP_Keywords">
<doc>*POST_TalentPool_Candidates_Add:*</doc>
<arguments>
<arg>400</arg>
</arguments>
<kw name="Connect" library="SQLlibrary">
<arguments>
<arg>${RNOAUTH_CUSTOM_SERVER}</arg>
<arg>${SQL_DB}</arg>
</arguments>
<status status="PASS" endtime="20170125 23:22:23.905" starttime="20170125 23:22:23.873"></status>
</kw>
<kw name="Execute Raw" library="SQLlibrary">
<arguments>
<arg>SELECT TOP 1 ou_id FROM ou WHERE (owner_id = ${SQL_GET_USERID} OR ou_id IN (SELECT ou_id FROM talent_pool_shared_user WHERE user_id = ${SQL_GET_USERID})) AND ou.type_id = 131072 AND ou_id IN (SELECT related_ou_id FROM ou_relation WHERE type_id = 16) ORDER BY NEWID()</arg>
</arguments>
<assign>
<var>${SQL_TalentPoolId}</var>
</assign>
<msg timestamp="20170125 23:22:23.945" level="INFO">${SQL_TalentPoolId} = 222</msg>
<status status="PASS" endtime="20170125 23:22:23.946" starttime="20170125 23:22:23.906"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SQL_TalentPoolId}</arg>
<arg>${SQL_TalentPoolId}</arg>
</arguments>
<msg timestamp="20170125 23:22:23.948" level="INFO">${SQL_TalentPoolId} = 222</msg>
<status status="PASS" endtime="20170125 23:22:23.949" starttime="20170125 23:22:23.947"></status>
</kw>
<kw name="Execute Raw" library="SQLlibrary">
<arguments>
<arg>SELECT CONVERT(varchar(255), NEWID())</arg>
</arguments>
<assign>
<var>${SQL_RandomName}</var>
</assign>
<msg timestamp="20170125 23:22:23.950" level="INFO">${SQL_RandomName} = 1E703BE9-7F8C-4AD1-AA7D-E345ADAE251B</msg>
<status status="PASS" endtime="20170125 23:22:23.950" starttime="20170125 23:22:23.949"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SQL_RandomName}</arg>
<arg>${SQL_RandomName}</arg>
</arguments>
<msg timestamp="20170125 23:22:23.952" level="INFO">${SQL_RandomName} = 1E703BE9-7F8C-4AD1-AA7D-E345ADAE251B</msg>
<status status="PASS" endtime="20170125 23:22:23.952" starttime="20170125 23:22:23.951"></status>
</kw>
<kw name="Create Http Context" library="HttpLibrary.HTTP">
<doc>Sets the HTTP host to use for future requests. You must call this</doc>
<arguments>
<arg>${HTTP_CONTEXT}</arg>
<arg>http</arg>
</arguments>
<msg timestamp="20170125 23:22:23.954" level="INFO">Host for next HTTP request set to 'laxqapexmt.office.cyberu.com'</msg>
<msg timestamp="20170125 23:22:23.954" level="INFO">Scheme for next HTTP request set to 'http'</msg>
<status status="PASS" endtime="20170125 23:22:23.954" starttime="20170125 23:22:23.953"></status>
</kw>
<kw name="Set Request Header" library="HttpLibrary.HTTP">
<doc>Sets a request header for the next request.</doc>
<arguments>
<arg>X-CORP</arg>
<arg>${RNOAUTH_CUSTOM_CORP}</arg>
</arguments>
<msg timestamp="20170125 23:22:23.955" level="INFO">Set request header "X-CORP" to "qa01-auto-smp-api"</msg>
<status status="PASS" endtime="20170125 23:22:23.955" starttime="20170125 23:22:23.954"></status>
</kw>
<kw name="Set Request Header" library="HttpLibrary.HTTP">
<doc>Sets a request header for the next request.</doc>
<arguments>
<arg>X-USERID</arg>
<arg>${SQL_GET_USERID}</arg>
</arguments>
<msg timestamp="20170125 23:22:23.956" level="INFO">Set request header "X-USERID" to "43"</msg>
<status status="PASS" endtime="20170125 23:22:23.957" starttime="20170125 23:22:23.956"></status>
</kw>
<kw name="Set Request Header" library="HttpLibrary.HTTP">
<doc>Sets a request header for the next request.</doc>
<arguments>
<arg>X-CULTUREID</arg>
<arg>${SQL_GET_USER_CULTURE}</arg>
</arguments>
<msg timestamp="20170125 23:22:23.958" level="INFO">Set request header "X-CULTUREID" to "1"</msg>
<status status="PASS" endtime="20170125 23:22:23.958" starttime="20170125 23:22:23.957"></status>
</kw>
<kw name="Set Request Header" library="HttpLibrary.HTTP">
<doc>Sets a request header for the next request.</doc>
<arguments>
<arg>content-type</arg>
<arg>application/json</arg>
</arguments>
<msg timestamp="20170125 23:22:23.959" level="INFO">Set request header "content-type" to "application/json"</msg>
<status status="PASS" endtime="20170125 23:22:23.959" starttime="20170125 23:22:23.959"></status>
</kw>
<kw name="Set Request Body" library="HttpLibrary.HTTP">
<doc>Set the request body for the next HTTP request.</doc>
<arguments>
<arg>{"Title": '${SQL_RandomName}'}</arg>
</arguments>
<msg timestamp="20170125 23:22:23.960" level="INFO">Request body set to "{"Title": '1E703BE9-7F8C-4AD1-AA7D-E345ADAE251B'}".</msg>
<status status="PASS" endtime="20170125 23:22:23.961" starttime="20170125 23:22:23.960"></status>
</kw>
<kw name="Execute Raw" library="SQLlibrary">
<arguments>
<arg>SELECT COUNT(ou_id) FROM ou_relation WHERE type_id = 16 AND ou_id = ${SQL_TalentPoolId}</arg>
</arguments>
<assign>
<var>${SQL_CountBefore}</var>
</assign>
<msg timestamp="20170125 23:22:23.967" level="INFO">${SQL_CountBefore} = 0</msg>
<status status="PASS" endtime="20170125 23:22:23.967" starttime="20170125 23:22:23.961"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SQL_CountBefore}</arg>
<arg>${SQL_CountBefore}</arg>
</arguments>
<msg timestamp="20170125 23:22:23.969" level="INFO">${SQL_CountBefore} = 0</msg>
<status status="PASS" endtime="20170125 23:22:23.969" starttime="20170125 23:22:23.968"></status>
</kw>
<kw name="Next Request May Not Succeed" library="HttpLibrary.HTTP">
<doc>Don't fail the next request if it's status code is &gt;= 400</doc>
<status status="PASS" endtime="20170125 23:22:23.970" starttime="20170125 23:22:23.970"></status>
</kw>
<kw name="POST" library="HttpLibrary.HTTP">
<doc>Issues a HTTP POST request.</doc>
<arguments>
<arg>/talentpool-api/talentpools/${SQL_TalentPoolId}/groups</arg>
</arguments>
<status status="PASS" endtime="20170125 23:22:24.460" starttime="20170125 23:22:23.970"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>/talentpool-api/talentpools/${SQL_TalentPoolId}/groups</arg>
</arguments>
<msg timestamp="20170125 23:22:24.461" level="INFO">/talentpool-api/talentpools/222/groups</msg>
<status status="PASS" endtime="20170125 23:22:24.461" starttime="20170125 23:22:24.460"></status>
</kw>
<kw name="Response Status Code Should Equal" library="HttpLibrary.HTTP">
<doc>Fails if the response status code of the previous request was not the</doc>
<arguments>
<arg>${RESPONSE_POST}</arg>
</arguments>
<status status="PASS" endtime="20170125 23:22:24.462" starttime="20170125 23:22:24.462"></status>
</kw>
<kw name="Get Response Body" library="HttpLibrary.HTTP">
<doc>Get the response body.</doc>
<assign>
<var>${resBody}</var>
</assign>
<msg timestamp="20170125 23:22:24.463" level="INFO">${resBody} = {"Message":"A group for this talentpool or nominationlist already exists!"}</msg>
<status status="PASS" endtime="20170125 23:22:24.463" starttime="20170125 23:22:24.463"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resBody}</arg>
</arguments>
<msg timestamp="20170125 23:22:24.465" level="INFO">{"Message":"A group for this talentpool or nominationlist already exists!"}</msg>
<status status="PASS" endtime="20170125 23:22:24.465" starttime="20170125 23:22:24.464"></status>
</kw>
<kw name="Execute Raw" library="SQLlibrary">
<arguments>
<arg>SELECT COUNT(ou_id) FROM ou_relation WHERE type_id = 16 AND ou_id = ${SQL_TalentPoolId}</arg>
</arguments>
<assign>
<var>${SQL_CountAfter}</var>
</assign>
<msg timestamp="20170125 23:22:24.471" level="INFO">${SQL_CountAfter} = 0</msg>
<status status="PASS" endtime="20170125 23:22:24.471" starttime="20170125 23:22:24.466"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SQL_CountAfter}</arg>
<arg>${SQL_CountAfter}</arg>
</arguments>
<msg timestamp="20170125 23:22:24.473" level="INFO">${SQL_CountAfter} = 0</msg>
<status status="PASS" endtime="20170125 23:22:24.473" starttime="20170125 23:22:24.472"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${CountAdjustment}=</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20170125 23:22:24.474" starttime="20170125 23:22:24.473"></status>
</kw>
<kw name="Execute Raw" library="SQLlibrary">
<arguments>
<arg>SELECT ${SQL_CountBefore}+0</arg>
</arguments>
<assign>
<var>${SQL_CountExpected}</var>
</assign>
<msg timestamp="20170125 23:22:24.480" level="INFO">${SQL_CountExpected} = 0</msg>
<status status="PASS" endtime="20170125 23:22:24.480" starttime="20170125 23:22:24.474"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${SQL_NUM}=</arg>
<arg>Evaluate</arg>
<arg>${SQL_CountBefore}+0</arg>
</arguments>
<status status="PASS" endtime="20170125 23:22:24.481" starttime="20170125 23:22:24.481"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${SQL_NUM}</arg>
</arguments>
<status status="PASS" endtime="20170125 23:22:24.482" starttime="20170125 23:22:24.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SQL_CountAfter}'== '${SQL_CountExpected}'</arg>
<arg>Utility Set Test Message</arg>
<arg>The ${SQL_CountAfter} matches with ${SQL_CountExpected}</arg>
</arguments>
<kw name="Utility Set Test Message" library="UtilityKeywords">
<arguments>
<arg>The ${SQL_CountAfter} matches with ${SQL_CountExpected}</arg>
</arguments>
<kw name="Set Test Message" library="BuiltIn">
<doc>Sets message for the current test case.</doc>
<arguments>
<arg>${testMsg}</arg>
<arg>${append}</arg>
</arguments>
<msg timestamp="20170125 23:22:24.488" level="INFO">Set test message to:
The 0 matches with 0</msg>
<status status="PASS" endtime="20170125 23:22:24.488" starttime="20170125 23:22:24.487"></status>
</kw>
<status status="PASS" endtime="20170125 23:22:24.488" starttime="20170125 23:22:24.486"></status>
</kw>
<status status="PASS" endtime="20170125 23:22:24.489" starttime="20170125 23:22:24.483"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SQL_CountAfter}'&lt;&gt; '${SQL_CountExpected}'</arg>
<arg>Fail</arg>
<arg>The ${SQL_CountAfter} did not match ${SQL_CountExpected}</arg>
</arguments>
<status status="PASS" endtime="20170125 23:22:24.492" starttime="20170125 23:22:24.489"></status>
</kw>
<status status="PASS" endtime="20170125 23:22:24.493" starttime="20170125 23:22:23.872"></status>
</kw>
<doc>*Name:*
API_TPC_Add_BC_InputVsOutput_Value

*Description:*
Verify successful input user ends up in output

*Run Arguments:*
-d TestResults -v RNOAUTH_HOST:QA01


*NOTE:* The Run Arguments will select what set of data to run durning run time by providing QA01 or QA052 or QA03 as the environment after the scaler RNOAUTH_HOST:
-d TestResults will put the output report.html and log.html in a folder named TestResults.</doc>
<tags>
<tag>POST</tag>
<tag>testrailid=24450</tag>
</tags>
<status status="PASS" endtime="20170125 23:22:24.493" critical="yes" starttime="20170125 23:22:23.401">The 0 matches with 0</status>
</test>
<status status="PASS" endtime="20170125 23:22:24.495" starttime="20170125 23:22:21.162"></status>
</suite>
<status status="PASS" endtime="20170125 23:22:24.497" starttime="20170125 23:22:21.159"></status>
</suite>
<status status="PASS" endtime="20170125 23:22:24.499" starttime="20170125 23:22:21.081"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="1">Critical Tests</stat>
<stat fail="0" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">POST</stat>
<stat fail="0" pass="1">testrailid=24450</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="COMP" pass="1">COMP</stat>
<stat fail="0" id="s1-s1" name="TestSuites" pass="1">COMP.TestSuites</stat>
<stat fail="0" id="s1-s1-s1" name="SMP-API-Talent Pool" pass="1">COMP.TestSuites.SMP-API-Talent Pool</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
